Design a Task Scheduler.

What does a task scheduler do ?
The process of deciding and assigning resources to the tasks in a timely manner is called task scheduling. 

The OS task scheduler schedules a node’s local tasks or processes on that node’s computational resources. At the same time, 
the data center’s task scheduler schedules billions of tasks coming from multiple tenants that use the data center’s resources.

Our goal is to design a task scheduler similar to the data center-level task scheduler where the following is considered:

Tasks will come from many different sources, tenants, and sub-systems.
Many resources will be dispersed in a data center (or maybe across many data centers).

What are the functional rquirements of a task scheduler?
  1. Submit tasks- The system should allow users to submit tasks for execution.
  2. Allocate Resources - Appropriate resources must be assigned for each task, resource handling should be done for tasks with priority.
  3. Monitoring - Tasks should be monitored and rescehduled if tasks fail to execute.
  4. Remove Tasks - There should be a mechanism to cancel tasks.
  5. Reschedule Tasks - tasks should be rescheduled in the event of failure or priority management.
  6. Show Task status -  At eany point we should be aware of the progress of the tasks. 

What are the non functional requirements of a task scheduler? 
  1.Availability: The system should be highly available to schedule and execute tasks.
  2.Durability: The tasks received by the system should be durable and should not be lost.
  3.Scalability: The system should be able to schedule and execute an ever-increasing number of tasks per day.
  4.Fault-tolerance: The system must be fault-tolerant by providing services uninterrupted despite faults in one or more of its components.
  5.Bounded waiting time: This is how long a task needs to wait before starting execution. We must not execute tasks much later than expected. 
    Users shouldn’t be kept on waiting for an infinite time. If the waiting time for users crosses a certain threshold, they should be notified.

What are the components of a task scheduler?

1.Clients: The clients of the cloud providers are individuals or organizations from small to large businesses who want to execute their tasks.
2. Rate limiter: The resources available for a client depend on the cost they pay. 
  It is important to limit the number of tasks for the reliability of our service. For instance, number of tasks per hour are allowed to enter the system. 
  Others will get a message like “Limit exceeded” instead of accepting the task and responding late. 
 A rate limiter limits the number of tasks the client schedules based on its subscription. 
 If the limit is exceeded, it returns an error message to the client that the rate limit has been exceeded.
3. Task submitter: The task submitter admits the task if it successfully passes through the rate limiter. 
   There isn’t a single task submitter. Instead, we have a cluster of nodes that admit the increasing number of tasks.
4. Unique ID generator: It assigns unique IDs to the newly admitted tasks.
5. Database: All of the tasks taken by the task submitter are stored in a distributed database. 
    For each task, we have some attributes, and all of the attributes except one are stored in the relational database.
6. Relational database (RDB): A relational database stores task IDs, user IDs, required resources, execution caps, the total number of attempts made by the client, delay tolerance, and so on, as shown in the following table. 
   We can find the details on the RDB here.
7. Graph database (GDB): This is a non-relational database that uses the graph data structure to store data.
   We use it to build and store a directed acyclic graph (DAG) of dependent tasks, topologically sorted by the task submitter, so that we can schedule tasks according to that DAG. We can find more details of the graph DB here.
8. Batching and prioritization: After we store the tasks in the RDB, the tasks are grouped into batches. 
Prioritization is based on the attributes of the tasks, such as delay tolerance or the tasks with short execution cap, and so on. The top 
 priority tasks are pushed into the distributed queue, where 
 limits the number of elements we can push into the queue. The value of 
 depends on many factors, such as currently available resources, the client or task priority, and subscription level.
9. Distributed queue: It consists of a queue and a queue manager. The queue manager adds, updates, or deletes tasks in the queue. It keeps track of the types of queues we use. It is also responsible for keeping the task in the queue until it executes successfully. In case a task execution fails, that task is made visible in the queue again. 
The queue manager knows which queue to run during the peak time and which queue to run during the off-peak time.
10. Queue manager: The queue manager deletes a task from the queue if it executes successfully. 
It also makes the task visible if its previous execution failed. It retries for the allowed number of attempts for a task in case of a failed execution.
11.Resource manager: The resource manager knows which of the resources are free. 
 It pulls the tasks from the distributed queue and assigns them resources. The resource manager keeps track of the execution of each task and sends back their statuses to the queue manager. If a task goes beyond its promised or required resource use, that task will be terminated, and the status is sent back to the task submitter, which will notify the client about the termination of the task through an error message.
12. Monitoring service: It is responsible for checking the health of the resource manager and the resources. 
  If some resource fails, it alerts the administrators to repair the resource or add new resources if required. 
If resources are not being used, it alerts the administrators to remove them or power them off. Here’s a detailed discussion on the design of monitoring services.
