Sharded Counters
How to handle High bursts of Likes for a tweet posted in twitter?
  - Lets take an example. A celebrity posted a tweet and accumulates million likes
  - Each like is an event, and every event is pushed to a queue.
 -  A worker pulls the events from the queue and then updates the database for likes.

What are sharded counters? 
- They are also known as distributed counters
- Each counter is divided into a number of shards. Each shard parallely computes the number of likes, comments or actions.
- Write requests are balanced along these shards

What is the workflow of sharded counters? 
- A write request is sent to the server to increase the number of likes
- This request is forwarded to a distributed counter.
- The counter has shards 0-N, might pick any shard to conpute the like count, simrlary other write requests are distributed to other shards in the counter. The cumulative sum of all of shards is taken as the like count.

What are the API's for Sharded Counter?
- CreateCounter
  api request:
        - counter_id
        - number_of_shards
  How is number of shards computed?
      - Number of followers 
      - Post type - public ot private     
- ReadCounter
      - counter_id
- WriteCounter
      -counter_id
      -action_type

How many shards should be created against each new tweet?
  - This depends on the number of followers and type of post for each tweet.
  - The shards are dcremented the moment, the topic is not hot anymore (eg not receiving many likes, based on feedback mechanism)

How will the shard value be incremented for a specific tweet?
  - Can be chosen based on round robin, random or metric based. metrics can be Country, location, user_type

What will happen in the system when read requests come from the end users?
When users generate a timeline, read requests are forwarded to the nearest servers, and then the persisted values in the store can be used to respond. This storage also helps to show the region-wise Top K trends. The list of local Top K trends is sent to the application server, and then the application server sorts all the lists to make a list of global Top K trends. Eventually, the application server sends all countersâ€™ details to the cache.
  
